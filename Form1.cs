using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace Krotoz
{
    public partial class Form1 : Form
    {
        struct Lexema
        {
            public string palabra { get; set; }
            public int token { get; set; }
        };
        struct ciclo {
            public Lexema Lexema{get; set;}
            public int? ID { get; set; }
        };
        struct Var
        {
            public string nombre { get; set; }
            public int tipo { get; set; }
            public object valor { get; set; }
        };
        
        string path, title;
        bool saved = false;
        int[,] matriz = {
            {1, 2, 74, 1, 8, 9, 56, 57, 10, 11, 12, 66, 67, 68, 69, 70, 71, 13, 14, 75, 77, 76, 0, 0, 0, 200},
            {1, 1, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50},
            {51, 2, 3, 5, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51, 51},
            {201, 4, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201},
            {52, 4, 52, 5, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52, 52},
            {202, 7, 202, 202, 202, 6, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202},
            {202, 7, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202, 202},
            {53, 7, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53, 53},
            {54, 54, 54, 54, 78, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54, 54},
            {55, 55, 55, 55, 55, 79, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55, 55},
            {59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 60, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59, 59},
            {61, 61, 61, 61, 61, 61, 61, 61, 63, 61, 62, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61, 61},
            {65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 64, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65, 65},
            {13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 72, 13, 13, 13, 13, 203, 13, 13, 13},
            {14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 73, 14, 14, 14}
        };
        int[,] matrizSintaxis = {
            {5, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 219, 220, 220, 220, 220, 220, 504, 220, 220, 220, 220, 209, 209, 1, 1, 1, 219, 219, 219, 219, 10, 17, 24, 209, 209, 209, 32, 209, 209, 209, 43, 47, 25, 36, 53, 209, 58},
            {2, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205},
            {207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 3, 207, 207, 207, 207, 207, 207, 207, 1, 207, 500, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207},
            {4, 4, 4, 4, 4, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206, 206},
            {207, 207, 207, 207, 207, 207, 3, 3, 3, 3, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 1, 207, 500, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207},
            {208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 6, 61, 208, 208, 208, 208, 208, 208, 208, 208, 208, 9, 9, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208, 208},
            {7, 7, 7, 7, 7, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 6, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 8, 8, 8, 8, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209},
            {207, 207, 207, 207, 207, 6, 6, 6, 6, 6, 207, 207, 207, 207, 207, 207, 207, 207, 7, 207, 207, 207, 207, 207, 207, 207, 501, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207},
            {210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 6, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210},
            {207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 502, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207},
            {210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 11, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210},
            {12, 12, 12, 12, 12, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 11, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 13, 13, 13, 13, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209},
            {207, 207, 207, 207, 207, 11, 11, 11, 11, 11, 14, 14, 14, 14, 14, 14, 207, 207, 12, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207},
            {210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 11, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210},
            {15, 15, 15, 15, 15, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 14, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 16, 16, 16, 16, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209},
            {207, 207, 207, 207, 207, 14, 14, 14, 14, 14, 14, 207, 207, 207, 207, 207, 207, 207, 15, 207, 207, 503, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 11, 11, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207},
            {210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 14, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210},
            {210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 18, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210},
            {19, 19, 19, 19, 19, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 18, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 20, 20, 20, 20, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209},
            {207, 207, 207, 207, 207, 18, 18, 18, 18, 18, 21, 21, 21, 21, 21, 21, 207, 207, 19, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207},
            {210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 18, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210},
            {22, 22, 22, 22, 22, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 21, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 23, 23, 23, 23, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209},
            {207, 207, 207, 207, 207, 21, 21, 21, 21, 21, 21, 207, 207, 207, 207, 207, 207, 207, 22, 207, 207, 505, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 19, 19, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207},
            {210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 21, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210},
            {212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 506, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212},
            {210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 26, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210},
            {27, 27, 27, 27, 27, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 26, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 28, 28, 28, 28, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209},
            {207, 207, 207, 207, 207, 26, 26, 26, 26, 26, 29, 29, 29, 29, 29, 29, 207, 207, 27, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207},
            {210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 26, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210},
            {30, 30, 30, 30, 30, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 29, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 31, 31, 31, 31, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209, 209},
            {207, 207, 207, 207, 207, 29, 29, 29, 29, 29, 29, 207, 207, 207, 207, 207, 207, 207, 30, 207, 207, 507, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 26, 26, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207},
            {210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 29, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210},
            {210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 33, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210},
            {34, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205},
            {213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 35, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213},
            {212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 508, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212},
            {210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 37, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210},
            {39, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 38, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205},
            {39, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205},
            {215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 40, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215, 215},
            {41, 41, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216, 216},
            {213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 42, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213},
            {212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 509, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212},
            {210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 44, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210},
            {45, 217, 217, 217, 45, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217},
            {213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 46, 213, 213, 213, 213, 213, 44, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213},
            {207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 510, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207},
            {210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 48, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210},
            {49, 217, 217, 217, 49, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217, 217},
            {218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 50, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218, 218},
            {51, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205},
            {213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 52, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213},
            {207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 511, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207},
            {54, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205, 205},
            {210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 55, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210},
            {56, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 57, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213},
            {213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 57, 213, 213, 213, 213, 213, 55, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213},
            {212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 512, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212},
            {210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 59, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210, 210},
            {213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 60, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213},
            {212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 513, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212, 212},
            {213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 62, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213, 213},
            {207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 514, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207, 207}
        };
        int banderaTipo = -1;
        int contadorCiclos = 0;
        int line;

        List<Lexema> posfijo = new List<Lexema>();
        Stack<Lexema> pilaPosfijo = new Stack<Lexema>();
        Stack<ciclo> pilaCiclos = new Stack<ciclo>();
        Dictionary<string, int> reservadas = new Dictionary<string, int>()
        {
            {"if", 100 },
            {"else", 101 },
            {"elif", 102 },
            {"not", 103 },
            {"and", 104 },
            {"or", 105 },
            {"choose", 106 },
            {"opt", 107 },
            {"done", 108 },
            {"default", 109 },
            {"post", 110 },
            {"get", 111 },
            {"repeat", 112 },
            {"each", 113 },
            {"int", 114 },
            {"dec", 115 },
            {"str", 116 },
            {"sin", 117 },
            {"cos", 118 },
            {"tan", 119 },
            {"sqr", 120 },
            {"func", 121 },
            {"return", 122 },
            {"init", 123 },
            {"mod", 124 }
        };
        Dictionary<int, string> errores = new Dictionary<int, string>()
        {
            {200, "Carácter no identificado por el lenguaje" },
            {201, "No escribiste dígito después del punto decimal" },
            {202, "No escribiste dígito después de la e" },
            {203, "No cerraste las comillas" },
            {204, "El identificador es demasiado largo" },
            {205, "Esperaba variable" },
            {206, "Esperaba número o cadena" },
            {207, "Esperaba ;" },
            {208, "Esperaba =" },
            {209, "Error en expresión" },
            {210, "Esperaba (" },
            {211, "Esperaba función" },
            {212, "Esperaba {" },
            {213, "Esperaba )" },
            {214, "Esperaba palabra reservada opt" },
            {215, "Esperaba :" },
            {216, "Esperaba número entero" },
            {217, "Esperaba cadena" },
            {218, "Esperaba coma" },
            {219, "= fuera de lugar" },
            {220, "Símbolo fuera de lugar" },
            {221, "función fuera de lugar" },
            {222, "Esperaba }" },
            {223, "Esperaba [" },
            {224, "else sin if" },
            {225, "elif sin if" },
            {226, "opt sin choose" },
            {227, "done sin choose" },
            {228, "default sin choose" },
            {229, "variable no declarada" },
            {230, "variable duplicada" },
            {231, "método duplicado" }
        };
        Dictionary<int, int> preferenciaOperadores = new Dictionary<int, int>()
        {
            {105, 0 }, // or
            {104, 1 }, // and
            {65, 2 }, // =
            {59, 2 }, // >
            {60, 2 }, // >=
            {61, 2 }, // <
            {62, 2 }, // <=
            {63, 2 }, // <>
            {64, 2 }, // ==
            {54, 3 }, // + 
            {55, 3 }, // -
            {56, 4 }, // *
            {57, 4 }, // /

        };
        Dictionary<int, string> variabletipo = new Dictionary<int, string>()
        {
            {114, "int"},
            {115, "dec"},
            {116, "str"},
            {121, "func"}
        };
        List<Tuple<Lexema, int>> tokens = new List<Tuple<Lexema, int>>();
        
        public Form1()
        {
            InitializeComponent();
        }

        private void button1_Click(object sender, EventArgs e)
        {
            Application.Exit();
        }

        private void btnMax_Click(object sender, EventArgs e)
        {
            if (WindowState == FormWindowState.Maximized)
            {
                WindowState = FormWindowState.Normal;
            }
            else
            {
                WindowState = FormWindowState.Maximized;
            }
        }

        private void btnMin_Click(object sender, EventArgs e)
        {
            WindowState = FormWindowState.Minimized;
        }

        private bool isReserved(int token)
        {
            return (token >= 100 && token < 103) || (token >= 106 && token < 110) || (token >= 112 && token < 114) || token == 123;
        }

        bool isOperator(int token)
        {
            
            return (token >= 54 && token <= 65) || (token >= 103 && token <= 105);
        }

        bool isOperand(int token)
        {
            return (token >= 50 && token <= 53) || token == 72;
        }

        bool isCicle(int token)
        {
            return (token == 100 || token == 106 || token == 112 || token == 113);
        }

        bool isDeclaredVariable(string id)
        {
            return vars.Any(e => e.nombre == id);
        }

        private void menuSintaxis_Click(object sender, EventArgs e)
        {
            //dgvErrores.Visible = false;
            menu_Lexico_Click(sender, e);
            Stack<int> pila = new Stack<int>();
            int[] cols = { 50, 51, 52, 53, 72, 124, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 74, 75, 76, 77, 78, 79, 114, 115, 116, 117, 118, 119, 120, 100, 102, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 121, 122, 123 };
            int state = 0,
                col = -1,
                i = 0;

            while (i < tokens.Count)
            {
                int token = tokens[i].Item1.token;
                for (int j = 0; j < cols.Length; j++)
                {
                    if (token == cols[j])
                    {
                        col = j;
                        break;
                    }
                }
                state = matrizSintaxis[state, col];

                if (state >= 200 && state < 500)
                {
                    //Console.WriteLine(errores[state]);
                    dgvErrores.Visible = true;
                    dgvErrores.Rows.Add(state, errores[state], tokens[i].Item2);
                    state = 0;
                    //i--;
                }
                else if (state >= 500)
                {
                    if(state == 514)
                    {
                        posfijo.Insert(posfijo.Count - 1, new Lexema() { palabra = "call" });
                    }
                    state = 0;
                }
                i++;
            }


            i = 0;
            while (i < tokens.Count)
            {
                int token = tokens[i].Item1.token;

                if (token == 66 || token == 68 || token == 70)
                {
                    pila.Push(token);
                }
                if (token == 67 || token == 69 || token == 71)
                {
                    if(pila.Count > 0)
                    {
                        if(token == 71)
                        {
                            var tmp = pila.Pop();
                            if (isReserved(tmp))
                            {
                                if(pila.Count > 0 && pila.Peek() == 70)
                                {
                                    pila.Pop();
                                }
                            }
                        }
                        else if (pila.Peek() == token - 1)
                        {
                            pila.Pop();
                        }
                    }
                    else
                    {
                        switch (token)
                        {
                            case 67:
                                //Esperaba (
                                dgvErrores.Rows.Add(210, errores[210], tokens[i].Item2);
                                break;
                            case 69:
                                //Esperaba [
                                dgvErrores.Rows.Add(223, errores[223], tokens[i].Item2);
                                break;
                            case 71:
                                //Esperaba {
                                dgvErrores.Rows.Add(212, errores[212], tokens[i].Item2);
                                break;
                        }
                    }

                    //if (pila.Count > 0 && pila.Peek() == token - 1)
                    //{
                    //    var tmp = pila.Pop();
                    //    if (tmp == 70)
                    //    {
                    //        if (pila.Count > 0)
                    //        {
                    //            if (isReserved(pila.Peek()))
                    //            {
                    //                //pila.Pop();
                    //            }
                    //            else
                    //            {
                    //                //Esperaba }
                    //                dgvErrores.Rows.Add(222, errores[222], tokens[i].Item2);

                    //            }
                    //        }
                    //    }
                        
                    //}
                    //else
                    //{
                    //    switch (token)
                    //    {
                    //        case 67:
                    //            //Esperaba (
                    //            dgvErrores.Rows.Add(210, errores[210], tokens[i].Item2);
                    //            break;
                    //        case 69:
                    //            //Esperaba [
                    //            dgvErrores.Rows.Add(223, errores[223], tokens[i].Item2);
                    //            break;
                    //        case 71:
                    //            //Esperaba {
                    //            dgvErrores.Rows.Add(212, errores[212], tokens[i].Item2);
                    //            break;
                    //    }
                    //}

                }
                if (isReserved(token))
                {
                    int tmp;
                    switch (token)
                    {
                        case 100:
                            pila.Push(token);
                            break;
                        case 101:
                            if (pila.Peek() != 100)
                            {
                                //else sin if
                                dgvErrores.Rows.Add(224, errores[224], tokens[i].Item2);
                            }
                            else
                            {
                                pila.Pop();
                            }
                            break;
                        case 102:
                            if (pila.Count == 0 || pila.Peek() != 100)
                            {
                                //elif sin if
                                dgvErrores.Rows.Add(225, errores[225], tokens[i].Item2);
                            }
                            break;
                        case 106:
                            pila.Push(token);
                            break;
                        case 107:
                            tmp = pila.Pop();
                            if (pila.Peek() != 106)
                            {
                                //opt sin choose
                                dgvErrores.Rows.Add(226, errores[226], tokens[i].Item2);
                            }
                            pila.Push(tmp);
                            break;
                        case 108:
                            tmp = pila.Pop();
                            if (pila.Peek() != 106)
                            {
                                //done sin choose
                                dgvErrores.Rows.Add(227, errores[227], tokens[i].Item2);
                            }
                            pila.Push(tmp);
                            break;
                        case 109:
                            tmp = pila.Pop();
                            if (pila.Peek() != 106)
                            {
                                //default sin choose
                                dgvErrores.Rows.Add(228, errores[228], tokens[i].Item2);
                            }
                            pila.Push(tmp);
                            break;
                        case 112:
                            pila.Push(token);
                            break;
                        case 113:
                            pila.Push(token);
                            break;
                        default:
                            break;
                    }
                }


                if (dgvErrores.RowCount > 0)
                {
                    dgvErrores.Visible = true;
                }
                i++;
            }

        }

        private void menu_archivo_nuevo_Click(object sender, EventArgs e)
        {
            frmFileName frm = new frmFileName();
            frm.crear = nuevoArchivo;
            frm.ShowDialog();
        }

        private void abrirArchivo()
        {
            //Mostrar Dialog
            if (openFile.ShowDialog() == DialogResult.OK)
            {
                //Definir la ubicacion del archivo
                path = openFile.FileName;
                //Abrir archivo
                var file = new StreamReader(path);
                //Leer y mostrar el contenido
                txtEditor.Text = file.ReadToEnd();
                //Definir el titulo del archivo
                lblFileName.Text = title = openFile.FileName.Split('\\').Last();
                saved = true;
            }
        }

        private void guardarArchivo()
        {
            save.FileName = $"{title}";
            if (saved)
            {
                //Si el archivo ya habia sido guardado
                using (var file = File.CreateText(path))
                {
                    //Obtener contenido
                    var contenido = txtEditor.Text;
                    //Guardar cambios
                    file.Write(contenido);
                }
            }
            else
            {
                //Si es la primera vez que se guarda
                if (save.ShowDialog() == DialogResult.OK)
                {
                    //obtener el path para guardar el archivo
                    path = save.FileName;
                    //crear archivo
                    using (var file = File.CreateText(path))
                    {
                        //obtener contenido
                        var contenido = txtEditor.Text;
                        //escribir el contenido en el archivo
                        file.Write(contenido);
                    }
                    //Definir el titulo del archivo
                    title = save.FileName.Split('\\').Last();

                    //flag que indica que fue guardado
                    saved = true;
                }
            }
            //mostrar el titulo en la barra del editor
            lblFileName.Text = title;
        }

        private void menu_archivo_abrir_Click(object sender, EventArgs e)
        {
            abrirArchivo();
        }

        private void menu_archivo_guardar_Click(object sender, EventArgs e)
        {
            guardarArchivo();
        }

        private void menu_archivo_guardarComo_Click(object sender, EventArgs e)
        {
            saved = false;
            guardarArchivo();
        }

        private void menu_Lexico_Click(object sender, EventArgs e)
        {
            int i = 0, state = 0, col = -1;
            line = 1;
            dgvLexico.Rows.Clear();
            dgvErrores.Rows.Clear();
            tokens.Clear();
            char c;
            string palabra = "";
            string cols = ".e+-*/><=()[]{}'#,;:\n\t ";
            string code = txtEditor.Text.Replace("\r", "");
            while (i < code.Length)
            {
                c = code[i];

                if ((state == 2 || state == 4) && c == 'e')
                    col = 3;
                else if (char.IsLetter(c))
                    col = 0;
                else if (char.IsDigit(c))
                    col = 1;
                else
                {
                    for (int j = 0; j < cols.Length; j++)
                    {
                        if (c == cols[j])
                        {
                            col = j + 2;
                            break;
                        }
                    }
                }

                if (col == -1)
                    col = 25;

                var repeat = state == 0;
                
                state = matriz[state, col];

                i++;

                if (state >= 50)
                {
                    palabra = palabra.Trim();
                    if (state >= 200)
                    {
                        dgvErrores.Visible = true;
                        //Checar errores
                        dgvErrores.Rows.Add(state, errores[state], line);
                    }
                    else
                    {
                        if (state == 50)
                        {
                            //Checar reservadas
                            if (reservadas.ContainsKey(palabra.Trim()))
                            {
                                state = reservadas[palabra.Trim()];
                            }
                        }

                        //if (state == 71)
                        //    palabra += c;

                        //if (repeat)
                        //    palabra += c;
                        //else if (c != '\'')
                        //    i--;

                        if ((c != ' ' && (repeat || isOperator(state))) || c == '\'')
                            palabra += c;
                        else
                            i--;

                        //if (c == '\'')
                        //    palabra += c;

                        dgvLexico.Rows.Add(palabra, state, line);
                        var lex = new Lexema() { palabra = palabra, token = state };
                        tokens.Add(new Tuple<Lexema,int>(lex, line));
                        semantico(lex);

                    }

                    state = 0;

                    palabra = string.Empty;
                }
                else
                {
                    palabra += c;
                }

                if (c == '\n')
                {
                    line++;
                }

            }

            if (ifClosed)
            {
                semantico(new Lexema() { palabra = "ifFinal", token = -1 });
            }
        }

        bool ifClosed = false;
        bool declaration = false;
        bool setValue = false;
        bool changeVariableValue = false;
        Var _var = new Var();
        List<object> decla = new List<object>();
        List<Var> vars = new List<Var>();

        void semantico(Lexema lexema)
        {
            var token = lexema.token;
            if((token >= 114 && token <= 116) || token == 121)
            {
                declaration = true;
                banderaTipo = token;
            }
            else if (declaration)
            {
                _var.tipo = banderaTipo;
                if(token == 77)
                {
                    declaration = false;
                    setValue = false;
                    //Agregar a variables
                    if(vars.Any(e => e.nombre == _var.nombre))
                    {
                        //variable duplicada
                        dgvErrores.Rows.Add(230, errores[230] + ": " + _var.nombre, line);

                    }
                    else
                    {
                        if(_var.valor == null)
                        {
                            _var.valor = banderaTipo == 116 ? (object)"''" : 0;
                        } 
                        vars.Add(_var);
                    }
                    _var = new Var();
                }
                else if(token == 50)
                {
                    _var.nombre = lexema.palabra;
                }
                else if(token == 65)
                {
                    setValue = true;
                }
                else if(token == 70 && banderaTipo == 121)
                {
                    declaration = false;
                    setValue = false;
                    //Agregar a variables
                    if (vars.Any(e => e.nombre == _var.nombre))
                    {
                        //metodo duplicado
                        dgvErrores.Rows.Add(231, errores[231] + ": " + _var.nombre, line);

                    }
                    else
                    {
                        _var.valor = 0;
                        vars.Add(_var);
                        posfijo.Add(new Lexema() { palabra = "func" });
                        posfijo.Add(new Lexema() { palabra = _var.nombre, token = 121 });
                    }
                    _var = new Var();
                }
                else if(token == 75)
                {
                    setValue = false;
                    //Agregar a variables
                    if (vars.Any(e => e.nombre == _var.nombre))
                    {
                        //variable duplicada
                        dgvErrores.Rows.Add(230, errores[230] + ": " + _var.nombre, line);

                    }
                    else
                    {
                        if (_var.valor == null)
                        {
                            _var.valor = banderaTipo == 116 ? (object)"''" : 0;
                        }
                        vars.Add(_var);
                    }
                    _var = new Var();
                }
                else if (setValue)
                {
                    _var.valor = lexema.palabra;
                }

            }
            else
            {
                if (ifClosed)
                {
                    ifClosed = false;
                    if (token != 102 && token != 101)
                    {
                        var id = posfijo.Last().palabra.Split('#').Last();
                        posfijo.Add(new Lexema() { palabra = "else#" + id, token = 101 });
                        posfijo.Add(new Lexema() { palabra = "inelse#" + id, token = 101 });
                        posfijo.Add(new Lexema() { palabra = "outelse#" + id, token = 101 });
                    }
                }

                if (isOperand(token))
                {
                    posfijo.Add(lexema);
                    if (lexema.token == 50)
                    {

                        _var = vars.Where(e => e.nombre == posfijo.Last().palabra).FirstOrDefault();
                        if (_var.nombre == null)
                        {
                            //Variable no declarada
                            dgvErrores.Rows.Add(229, errores[229] + ": " + posfijo.Last().palabra, line);
                        }
                    }
                }
                else if (token == 110 || token == 111)
                {
                    posfijo.Add(lexema);
                }
                else if (isOperator(token))
                {
                    if (pilaPosfijo.Count == 0)
                    {
                        pilaPosfijo.Push(lexema);
                    }
                    else if (isOperator(pilaPosfijo.Peek().token))
                    {
                        if (preferenciaOperadores[pilaPosfijo.Peek().token] < preferenciaOperadores[token])
                        {
                            pilaPosfijo.Push(lexema);
                        }
                        else
                        {
                            while (pilaPosfijo.Count > 0 && isOperator(pilaPosfijo.Peek().token) && preferenciaOperadores[pilaPosfijo.Peek().token] >= preferenciaOperadores[token])
                            {
                                posfijo.Add(pilaPosfijo.Pop());
                            }
                            pilaPosfijo.Push(lexema);
                        }
                    }
                    else
                    {
                        pilaPosfijo.Push(lexema);
                    }

                    if(token == 65)
                    {
                        changeVariableValue = true;
                    }
                }
                else if (isReserved(token))
                {
                    //ciclo
                    if (isCicle(token))
                    {
                        contadorCiclos++;
                        var cicle = new ciclo() { Lexema = lexema, ID = contadorCiclos };
                        pilaCiclos.Push(cicle);
                        posfijo.Add(new Lexema() { palabra = cicle.Lexema.palabra + "#" + cicle.ID, token = token });
                    }
                    else if (token == 123)
                    {
                        var cicle = new ciclo() { Lexema = lexema };
                        pilaCiclos.Push(cicle);
                        posfijo.Add(lexema);
                    }
                    else if ((token == 101 || token == 102) && posfijo.Last().token == 100)
                    {
                        var cicle = new ciclo() { Lexema = lexema, ID = int.Parse(posfijo.Last().palabra.Split('#').Last()) };
                        pilaCiclos.Push(cicle);
                        var id = posfijo.Last().palabra.Split('#').Last();
                        posfijo.Add(new Lexema() { palabra = cicle.Lexema.palabra + "#" + id, token = cicle.Lexema.token });
                    }
                }
                else if (token == 77)
                {
                    while (pilaPosfijo.Count > 0)
                    {
                        posfijo.Add(pilaPosfijo.Pop());
                    }
                }
                else if (token == 70)
                {
                    if (pilaCiclos.Count > 0)
                    {
                        var cicle = pilaCiclos.Peek();
                        var lex = "in" + cicle.Lexema.palabra;
                        lex += cicle.ID == null ? string.Empty : ("#" + cicle.ID);
                        posfijo.Add(new Lexema() { palabra = lex, token = cicle.Lexema.token });
                    }
                }
                else if (token == 71)
                {
                    if (pilaCiclos.Count > 0)
                    {
                        var cicle = pilaCiclos.Pop();
                        var lex = "out" + cicle.Lexema.palabra;
                        lex += cicle.ID == null ? string.Empty : ("#" + cicle.ID);
                        posfijo.Add(new Lexema() { palabra = lex, token = cicle.Lexema.token });

                        if (cicle.Lexema.token == 100 || cicle.Lexema.token == 102)
                        {
                            ifClosed = true;
                            //posfijo.Add(new Lexema() { palabra = "else#" + cicle.ID, token = 101 });
                        }
                    }
                }
                else if (token == 66)
                {
                    pilaPosfijo.Push(lexema);
                }
                else if (token == 67)
                {
                    if (pilaPosfijo.Count > 0)
                    {
                        while (pilaPosfijo.Peek().token != 66)
                        {
                            posfijo.Add(pilaPosfijo.Pop());
                        }
                        pilaPosfijo.Pop();
                    }
                }
            }
        }

        private void menu_semantico_Click(object sender, EventArgs e)
        {
            pilaPosfijo.Clear();
            dgvVariables.Rows.Clear();
            posfijo.Clear();
            contadorCiclos = 0;
            banderaTipo = -1;
            ifClosed = false;
            vars.Clear();
            _var = new Var();

            menuSintaxis_Click(sender, e);
            var post = "";
            foreach (var lex in posfijo)
            {
                post += lex.palabra + "  ";
            }

            foreach (var v in vars)
            {
                dgvVariables.Rows.Add(v.nombre, variabletipo[v.tipo], v.valor);
            }

            MessageBox.Show(post);
        }

        public void nuevoArchivo(string titulo)
        {
            if (titulo != null)
            {               
                //cerrar archivo actual
                guardarArchivo();                
                txtEditor.Text = string.Empty;                
                //crear nuevo
                title = titulo;
                lblFileName.Text = title + '*';
                saved = false;            
            }
        }
    }
}
